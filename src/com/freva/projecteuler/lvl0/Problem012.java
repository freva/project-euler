package com.freva.projecteuler.lvl0;

import com.freva.projecteuler.Problem;

/**
 * Project Euler problem #012:
 * Answer: 76576500, Time: 3ms
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */

public class Problem012 implements Problem {
    public Number solve() {
        final int startTriangleNumber = 1;

        // Since triangle numbers are formed as i * (i+1) /2, we can easily separate it into two products i and (i+1)/2
        // or i/2 and i+1 depending on if i is odd or even. Number of divisors for n, numDiv(n), is equal to
        // numDiv(a)*numDiv(b) if a*b = n, since for each iteration, at least 1 part of the triangle formula remains,
        // we can store the numDiv(b) to use it as numDiv(a) in next iteration, calculating only one numDiv per iteration
        int prevNumOfDivisors = numberOfDivisors(startTriangleNumber);
        for (int i = startTriangleNumber + 1; ; i++) {
            int currentNumOfDivisors = numberOfDivisors((i & 1) == 1 ? i : i / 2);
            int numOfDivisors = prevNumOfDivisors * currentNumOfDivisors;

            prevNumOfDivisors = currentNumOfDivisors;
            if (numOfDivisors > 500) {
                return (i - 1) * i / 2;
            }
        }
    }

    private static int numberOfDivisors(int n) {
        final int end = (int) Math.sqrt(n);
        int count = 0;
        for (int i = 1; i < end; i++) {
            if (n % i == 0) {
                count += 2;
            }
        }

        return count + (end * end == n ? 1 : 0);
    }
}
