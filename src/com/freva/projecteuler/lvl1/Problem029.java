package com.freva.projecteuler.lvl1;

import com.freva.projecteuler.Problem;

/**
 * Project Euler problem #029:
 * Answer: 9183, Time: 3ms
 *
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * 2^2=4,       2^3=8,      2^4=16,     2^5=32
 * 3^2=9,       3^3=27,     3^4=81,     3^5=243
 * 4^2=16,      4^3=64,     4^4=256,    4^5=1024
 * 5^2=25,      5^3=125,    5^4=625,    5^5=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct
 * terms: 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */

public class Problem029 implements Problem {
    public Number solve() {
        final int limit = 100;
        final int[] powers = new int[limit + 1];
        for (int i = limit; i > 1; i--) {
            powers[i] = 1;
            for (int j = 2, power = i * i; power <= limit; j++, power *= i) {
                powers[power] = j;
            }
        }

        int sum = 0;
        for (int a = 2; a <= limit; a++) {
            sum += numberOfUniqueExponentTerms(powers[a], limit);
        }
        return sum;
    }

    // Returns number of unique terms for a number that can be written as n^power where n the smallest base
    private static int numberOfUniqueExponentTerms(int power, int maxB) {
        if (power <= 1) { // For power <= 1, all terms will be unique
            return maxB - 1;
        }

        int count = 0;
        for (int b = 2; b <= maxB; b++) {
            boolean isUnique = true;
            for (int d = 1; d < power && isUnique; d++) {
                isUnique = power * b > d * maxB || power * b % d != 0;
            }

            if (isUnique) {
                count++;
            }
        }

        return count;
    }
}
