package com.freva.projecteuler.lvl1;

import com.freva.projecteuler.Problem;

/**
 * Project Euler problem #044:
 * Answer: 5482660, Time: 9ms
 *
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
 * D = |Pk − Pj| is minimised; what is the value of D?
 */

public class Problem044 implements Problem {
    public Number solve() {
        for (int d = 1; ; d++) {
            int pentagonalDifference = getPentagonal(d);

            // We start with the difference between the two pentagonal numbers, D, this way we can abort as soon as we
            // find one since it will be the smallest. The goal is to find n and m such that P(m)-P(n) = D:
            // We know that m > n, so D = P(n+i) - P(n) = (n+i)*(3*(n+i)+1)/2 - i*(3*i+1)/2, solving for n gives:
            // n = ((2*D)/i - 3*i - 1) / 6. Now we loop over i increasing it until we get n < 1
            for (int i = 1; ; i++) {
                int t = 2 * pentagonalDifference - i * (3 * i - 1);
                int n = t / (6 * i);

                if (n < 1) break;
                if (6 * n * i != t) continue;

                int pentagonalLower = getPentagonal(n);
                int pentagonalUpper = pentagonalDifference + pentagonalLower;

                int pentagonalSum = pentagonalLower + pentagonalUpper;
                if (isPentagonal(pentagonalSum)) {
                    return pentagonalDifference;
                }
            }
        }
    }

    private static int getPentagonal(int n) {
        return n * (3 * n - 1) / 2;
    }

    // Solving P = n(3n−1) / 2 for n gives:
    // n = (sqrt(24P + 1) + 1) / 6
    private static boolean isPentagonal(int candidate) {
        final double n = (1 + Math.sqrt(1 + 24 * candidate)) / 6;
        return (int) n == n;
    }
}
